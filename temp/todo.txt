TODO RNN:
    - OOV:
        1. Scegliere se eliminare tweet nel caso in cui le OOV in quel tweet siano superiori al 70% (?)
        2. Scegliere se trasformare tutte le OOV in una stringa specifica (e.g. 'ooooo')
    - Majority voting?
    - Controllare che i dati passati al modello e l'elaborazione siano corrette


TODO : 
    - caricare i dataset (train, val, test) in un pandas dataframe
    - unire i dataframe in un unico dataframe e aggiungere il campo split (train, val, test); aggiungere anche un idx 0...N
    - rimuovere le righe senza tweet 
    - dividere il dataframe in due, tweet e account, entrambi identificati dall'id account ed entrambi con il campo 'label' 
    - tweet : 
        - cercare pipeline di preprocessing che permettano di preservare la struttura del tweet anche in considerazione degli OOV su GloVe [RESOURCE]
        - lstm per single tweet text (sentence embedding o ultimo state rnn ? sigmoid out ?) [RESOURCE]
        - decidere quali feature possono comporre i metadati dei tweet [RESOURCE]
        - espandere il dataframe con i metadati del tweet 
        - lstm per single tweet text + metadata [RESOURCE]
        - dataframe multi-tweet (numero di tweet??)
        - lstm multi-tweet (text and metadata) [RESOURCE]
    - account : 
        - eliminare colonne non necessarie 
        - processing di ogni riga per creare le feature necessarie [RESOURCE]
        - random forest con user metadata + tweet output info da frozen network 
    - loggare i risultati da qualche parte (wandb?)


PERCORSO DEL PROGETTO 
- bot / no_bot da single tweet text 
- bot / no_bot da single tweet text + tweet metadata
- bot / no_bot da più tweet texts ( majority voting ? tutti i tweet alla lstm ? altro ? ) + tweet metadata ( come per molti tweet ??)
- bot / no_bot da tweet(s) (in teoria da molti visto che è una progressione), sia testo che metadati, + user metadata (Random Forest)


RISORSE DI RIFERIMENTO 
- topic -> [RESOURCE] 